@page
@model StudentAdvisor.Pages_Students.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Student</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            First Name:
            @* @Html.DisplayNameFor(model => model.Student.FirstName) *@
        </dt>
        <dd class="col-sm-10">

            @Html.DisplayFor(model => model.Student.FirstName)
        </dd>
        <dt class="col-sm-2">
            Last Name
            @* @Html.DisplayNameFor(model => model.Student.LastName) *@
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.Gender)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.Gender)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.PhoneNumber)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.PhoneNumber)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.Email)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.Email)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.StudentPrograms.programTitle)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.StudentPrograms.programTitle)
        </dd>



        <dt>Course History</dt>
        <table class="table">
            <thead>
                <tr> </tr>
                <tr>
                    <th>Course Name</th>
                    <th>Course Code</th>
                    <th>Grade</th>
                    <th>Credits</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in Model.Student.CourseHistories)
                {
                    <tr>
                        <td>@course.CourseName</td>
                        <td>@course.CourseCode</td>
                        <td>@course.Grade</td>
                        <td>@course.Credits</td>
                    </tr>
                }
            </tbody>
        </table>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.Semester)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.Semester)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.GPA)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.GPA)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.CreditsCompleted)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.CreditsCompleted)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.AcademicStanding)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.AcademicStanding)
        </dd>
        <dt class="col-sm-2">Graduation Status</dt>
        <dd class="col-sm-10">
            @{
                var failingCoursesCount = Model.Student.CourseHistories.Where(c => c.Grade == "F").Count();
                var failingCourses = Model.Student.CourseHistories.Where(c => c.Grade == "F").ToList();
                var failingCoursesNames = string.Join(", ", failingCourses.Select(c => c.CourseCode));
            }
            @if (failingCoursesCount >= 2)
            {
                @:Student failed @failingCoursesCount course  (@failingCoursesNames)
            }
            else if (Model.Student.GPA < 2.0 && Model.Student.AcademicStanding == "Good")
            {
                @:Student cannot graduate due to the GPA of @Model.Student.GPA.
            }
            else if (Model.Student.CreditsCompleted < 70 && Model.Student.AcademicStanding == "Good")
            {
                @:Student cannot graduate due to the courses that have 
            }
            else if (Model.Student.CreditsCompleted > 70 && Model.Student.GPA > 2.0 && Model.Student.AcademicStanding ==
            "Good")
            {
                @:Student is eligible for graduation
            }
            else if (Model.Student.CreditsCompleted > 70 && Model.Student.GPA > 2.0 && Model.Student.AcademicStanding ==
            "Probation")
            {
                @:Student is on probation and is eligible for graduation
            }
            else if (Model.Student.CreditsCompleted < 70 && Model.Student.GPA < 2.0 && Model.Student.AcademicStanding ==
            "Good")
            {
                @:Student is eligible for graduation
            }
            else
            {
                @:Student is not eligible for graduation
            }
        </dd>

        <dt class="col-sm-2">
            Advisor Notes
        </dt>
        <dd class="col-sm-10">
            <ul>
                @foreach (var note in Model.Student.AdvisorsNotes)
                {
                    <li>@note.Note (@note.CreatedAt.ToString("yyyy-MM-dd"))</li>
                    <a class="btn btn-secondary" asp-page="/Advisor/Edit" asp-route-id="@note.AdvisorsNoteId">Edit</a>
                }
            </ul>
            <a class="btn btn-secondary" asp-page="/Advisor/Create">Add</a>
        </dd>

    </dl>
</div>
<div>
    <a class="btn btn-primary" asp-page="./Index">Back to List</a> <em> | </em>
    <a class="btn btn-secondary" asp-page="./Edit" asp-route-id="@Model.Student.StudentId">Edit</a>
    <br />
    <a class="btn btn-danger" asp-page="/Students/Delete" asp-route-id="@Model.Student.StudentId">Withdraw Student</a>
</div>
